from dotenv import load_dotenv
import os
import openai
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters
)

# get tokens and settings
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = openai.OpenAI(api_key=OPENAI_API_KEY)

openai.api_key = OPENAI_API_KEY

# examples of text style
your_messages_sample = [
    "–ù—É –≤—ã–ø—å–µ–º ‚Äî –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫—Ç–æ —Ç—É—Ç –∑–µ—Ç, –∞ –∫—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞ IPA.",
    "–ü–∞–≤–µ–ª, —Å —Ç–µ–±—è –∫—Ä–∞—Ñ—Ç, —Å –º–µ–Ω—è –º–æ—Ä–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.",
    "–î–∞, —á–∞—Ä–æ—á–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç, –Ω–æ –Ω–µ –≤ —Ä–∞–±–æ—á–µ–µ –∂–µ –≤—Ä–µ–º—è.",
    "–ù–∏–∂–Ω–∏–π, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, –≤—Å—Ç—Ä–µ—Ç–∏–ª —Ç—É–º–∞–Ω–æ–º –∏ –ø–æ—Ö–º–µ–ª—å–µ–º.",
    "–ù–µ –ø–∏—à–∏ –≤ –≤–∞–π–±–µ—Ä ‚Äî —ç—Ç–æ —á–∞—Ç –¥–ª—è –æ—Ç—á–∞—è–≤—à–∏—Ö—Å—è.",
]

# flag of silence
is_silent = False  

# promt for openAI
async def reply_in_your_style(user_message: str) -> str:
    prompt = f"""
–¢—ã ‚Äî —É–º–Ω—ã–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π, –º–µ—Å—Ç–∞–º–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.
–ì–æ–≤–æ—Ä–∏—à—å –ø–æ-—Ä—É—Å—Å–∫–∏, –≤ –∂–∏–≤–æ–º, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º —Å—Ç–∏–ª–µ. –ú–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–ª—è—Ç—å –ª—ë–≥–∫–∏–π –º–∞—Ç, –±—ã—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã, –æ—Ç—Å—ã–ª–∫–∏ –∫ –ø–∏–≤—É, –¥—Ä—É–∑—å—è–º, –Ω–æ–≤–æ—Å—Ç—è–º.
–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç–≤–æ–µ–π —Ä–µ—á–∏:

{chr(10).join(f"- {msg}" for msg in your_messages_sample)}

–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{user_message}"
"""
    #client = openai.OpenAI()

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.9,
        max_tokens=150
    )

    return response.choices[0].message.content


# message processing
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_silent

    message = update.message
    if not message or not message.text or message.from_user.is_bot:
        return

    if is_silent:
        return  # –ú–æ–ª—á–∏–º

    user_text = message.text
    reply = await reply_in_your_style(user_text)
    await message.reply_text(reply)

# silent
async def command_tiho(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_silent
    is_silent = True
    await update.message.reply_text("ü§´ –ú–æ–ª—á—É, –∫–∞–∫ –ø–∞—Ä—Ç–∏–∑–∞–Ω.")

# talk
async def command_govori(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_silent
    is_silent = False
    await update.message.reply_text("üó£Ô∏è –Ø —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ!")

# launch bot
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("silent", command_tiho))
    app.add_handler(CommandHandler("talk", command_govori))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å—ë, –ø–æ–∫–∞ –Ω–µ —Å–∫–∞–∂–µ—à—å /—Ç–∏—Ö–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()

